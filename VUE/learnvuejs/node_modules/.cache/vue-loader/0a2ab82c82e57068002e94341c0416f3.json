{"remainingRequest":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\src\\components\\page\\customer\\CustomerDetail.vue?vue&type=template&id=ad6ac660&scoped=true&","dependencies":[{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\src\\components\\page\\customer\\CustomerDetail.vue","mtime":1616581439413},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
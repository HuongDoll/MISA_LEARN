{"remainingRequest":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\src\\components\\page\\customer\\CustomerDetail.vue?vue&type=template&id=ad6ac660&scoped=true&","dependencies":[{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\src\\components\\page\\customer\\CustomerDetail.vue","mtime":1616663428538},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hthuong\\source\\MISA_LEARN\\VUE\\learnvuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygiZGl2IiwgewogICAgICBzdGF0aWNDbGFzczogImRpYWxvZyIsCiAgICAgIGF0dHJzOiB7IGlkOiAiZGlhbG9nIiB9LAogICAgICBvbjogewogICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgIHJldHVybiBfdm0uY2xvc2VkaWFsb2coKQogICAgICAgIH0KICAgICAgfQogICAgfSksCiAgICBfYygiZm9ybSIsIHsgc3RhdGljQ2xhc3M6ICJkaWFsb2ctY2hpbGQiLCBhdHRyczogeyBpZDogImRpYWxvZy1jaGlsZCIgfSB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGFiLWNsb3NlIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlZGlhbG9nKCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmFzIGZhLXRpbWVzIiwKICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNsb3NlLWRpYWxvZyIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUiIH0sIFtfdm0uX3YoIlRIw5RORyBUSU4gS0jDgUNIIEjDgE5HIildKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJwYXJlbnQtY29udGVudCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1kaWFsb2ciIH0sIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1yaWdodCB3aWdodC0yLTMiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwLWlucHV0IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwIHdpZ2h0LTEtMiIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jdXN0b21lci5jdXN0b21lckNvZGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjdXN0b21lci5jdXN0b21lckNvZGUiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBjbGFzczogeyB3YXJuaW5nOiAhX3ZtLnZhbGlkYXRlcy5DdXN0b21lckNvZGUgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiQ3VzdG9tZXJDb2RlIiB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY3VzdG9tZXIuY3VzdG9tZXJDb2RlIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmN1c3RvbWVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b21lckNvZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cCB3aWdodC0xLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3VzdG9tZXIuRnVsbE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjdXN0b21lci5GdWxsTmFtZSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IHdhcm5pbmc6ICFfdm0udmFsaWRhdGVzLkZ1bGxOYW1lIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBpZDogIkZ1bGxOYW1lIiB9LAogICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY3VzdG9tZXIuRnVsbE5hbWUgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0uY3VzdG9tZXIsICJGdWxsTmFtZSIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwLWlucHV0IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwIHdpZ2h0LTEtMiIgfSwgWwogICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCBbX3ZtLl92KCJNw6MgdGjhursgdGjDoG5oIHZpw6puIildKSwKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmN1c3RvbWVyLm1lbWJlckNhcmRDb2RlLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3VzdG9tZXIubWVtYmVyQ2FyZENvZGUiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiTWVtYmVyQ2FyZENvZGUiIH0sCiAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jdXN0b21lci5tZW1iZXJDYXJkQ29kZSB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jdXN0b21lciwKICAgICAgICAgICAgICAgICAgICAgICAgICAibWVtYmVyQ2FyZENvZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cCB3aWdodC0xLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgW192bS5fdigiTmjDs20ga2jDoWNoIGjDoG5nIildKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jdXN0b21lci5jdXN0b21lckdyb3VwTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3VzdG9tZXIuY3VzdG9tZXJHcm91cE5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIkN1c3RvbWVyR3JvdXBOYW1lIiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmN1c3RvbWVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImN1c3RvbWVyR3JvdXBOYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJvcHRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsdWU6ICJOaMOzbSBraMOhY2ggaMOgbmcgTUlTQSIsIHNlbGVjdGVkOiAiIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBOaMOzbSBraMOhY2ggaMOgbmcgTUlTQSAiKV0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogIktow6FjaCB2aXAiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIktow6FjaCB2aXAiKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cC1pbnB1dCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cCB3aWdodC0xLTIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgW192bS5fdigiTmfDoHkgc2luaCIpXSksCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jdXN0b21lci5kYXRlT2ZCaXJ0aCwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImN1c3RvbWVyLmRhdGVPZkJpcnRoIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJkYXRlIiwKICAgICAgICAgICAgICAgICAgICAgIGlkOiAiRGF0ZU9mQmlydGgiLAogICAgICAgICAgICAgICAgICAgICAgbmFtZTogIkRhdGVPZkJpcnRoIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jdXN0b21lci5kYXRlT2ZCaXJ0aCB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jdXN0b21lciwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0ZU9mQmlydGgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQudmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cC1zZXggd2lnaHQtMS0yIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbX3ZtLl92KCJHaeG7m2kgdMOtbmgiKV0pLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyYWRpby1zZXgiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmN1c3RvbWVyLmdlbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3VzdG9tZXIuZ2VuZGVyIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInJhZGlvIiwgaWQ6ICJtYWxlIiwgbmFtZTogIkdlbmRlciIgfSwKICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxLAogICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBfdm0uX3EoX3ZtLmN1c3RvbWVyLmdlbmRlciwgMSkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0uY3VzdG9tZXIsICJnZW5kZXIiLCAxKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJtYWxlIiB9IH0sIFtfdm0uX3YoIk5hbSIpXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInJhZGlvLXNleCIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3VzdG9tZXIuZ2VuZGVyLAogICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjdXN0b21lci5nZW5kZXIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAicmFkaW8iLCBpZDogImZlbWFsZSIsIG5hbWU6ICJHZW5kZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMiwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogX3ZtLl9xKF92bS5jdXN0b21lci5nZW5kZXIsIDIpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRzZXQoX3ZtLmN1c3RvbWVyLCAiZ2VuZGVyIiwgMikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiZmVtYWxlIiB9IH0sIFtfdm0uX3YoIk7hu68iKV0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJyYWRpby1zZXgiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmN1c3RvbWVyLmdlbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3VzdG9tZXIuZ2VuZGVyIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInJhZGlvIiwKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICJvdGhlciIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJHZW5kZXIiLAogICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiAiIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiBfdm0uX3EoX3ZtLmN1c3RvbWVyLmdlbmRlciwgMCkKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0uY3VzdG9tZXIsICJnZW5kZXIiLCAwKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJvdGhlciIgfSB9LCBbX3ZtLl92KCJLaMOhYyIpXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LWRvd24iIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JvdXAtaW5wdXQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cCB3aWdodC0yLTMiIH0sIFsKICAgICAgICAgICAgICBfYygibGFiZWwiLCBbX3ZtLl92KCJFbWFpbCIpXSksCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jdXN0b21lci5lbWFpbCwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3VzdG9tZXIuZW1haWwiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBjbGFzczogeyB3YXJuaW5nOiAhX3ZtLnZhbGlkYXRlcy5FbWFpbCB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogImV4YW1wbGVAZG9tYWluLmNvbSIsCiAgICAgICAgICAgICAgICAgIGlkOiAiRW1haWwiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jdXN0b21lci5lbWFpbCB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5jdXN0b21lciwgImVtYWlsIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwIHdpZ2h0LTEtMyIgfSwgWwogICAgICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmN1c3RvbWVyLnBob25lTnVtYmVyLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjdXN0b21lci5waG9uZU51bWJlciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIGNsYXNzOiB7IHdhcm5pbmc6ICFfdm0udmFsaWRhdGVzLlBob25lTnVtYmVyIH0sCiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiUGhvbmVOdW1iZXIiIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmN1c3RvbWVyLnBob25lTnVtYmVyIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmN1c3RvbWVyLCAicGhvbmVOdW1iZXIiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cC1pbnB1dCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwIHdpZ2h0LTItMyIgfSwgWwogICAgICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIlTDqm4gY8O0bmcgdHkiKV0pLAogICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY3VzdG9tZXIuY29tcGFueU5hbWUsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImN1c3RvbWVyLmNvbXBhbnlOYW1lIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInRleHQiLCBpZDogIkNvbXBhbnlOYW1lIiB9LAogICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jdXN0b21lci5jb21wYW55TmFtZSB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5jdXN0b21lciwgImNvbXBhbnlOYW1lIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdyb3VwIHdpZ2h0LTEtMyIgfSwgWwogICAgICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIk3DoyBz4buRIHRodeG6vyIpXSksCiAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jdXN0b21lci5jb21wYW55VGF4Q29kZSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY3VzdG9tZXIuY29tcGFueVRheENvZGUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiTcOjIHPhu5EgdGh14bq/IGPhu6dhIGPDtG5nIHR5IiwKICAgICAgICAgICAgICAgICAgaWQ6ICJDb21wYW55VGF4Q29kZSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmN1c3RvbWVyLmNvbXBhbnlUYXhDb2RlIH0sCiAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoCiAgICAgICAgICAgICAgICAgICAgICBfdm0uY3VzdG9tZXIsCiAgICAgICAgICAgICAgICAgICAgICAiY29tcGFueVRheENvZGUiLAogICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC52YWx1ZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZ3JvdXAtaW5wdXQiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJncm91cCB3aWdodC1mdWxsIiB9LCBbCiAgICAgICAgICAgICAgX2MoImxhYmVsIiwgW192bS5fdigixJDhu4thIGNo4buJIildKSwKICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmN1c3RvbWVyLmFkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImN1c3RvbWVyLmFkZHJlc3MiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiQWRkcmVzcyIgfSwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uY3VzdG9tZXIuYWRkcmVzcyB9LAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5jdXN0b21lciwgImFkZHJlc3MiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9vdGVyIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24tZGVsZXRlIiwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIsIGlkOiAiYnV0dG9uLWRlbGV0ZSIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNsb3NlZGlhbG9nKCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIgSOG7plkgIildCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbi1zYXZlIiwKICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIsIGlkOiAiYnV0dG9uLXNhdmUiIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zYXZlKCkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl9tKDQpLCBfYygic3BhbiIsIFtfdm0uX3YoIkzGr1UiKV0pXQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LWxlZnQgd2lnaHQtMS0zIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWFnZS1hdmF0YXIiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uLy4uL2Fzc2V0cy9jb250ZW50L2ltYWdlL2RlZmF1bHQtYXZhdGFyLmpwZyIpCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX2MoImRpdiIsIFtfdm0uX3YoIlZ1aSBsw7JuZyBjaOG7jW4g4bqjbmggY8OzIMSR4buLbmggZOG6oW5nIildKSwKICAgICAgX2MoImIiLCBbX3ZtLl92KCIuanBnLCAuanBlZywgLnBuZywgLmdpZi4iKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGFiZWwiLCBbCiAgICAgIF92bS5fdigiTcOjIGtow6FjaCBow6BuZyAiKSwKICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1yZWQiIH0sIFtfdm0uX3YoIigqKSIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsYWJlbCIsIFsKICAgICAgX3ZtLl92KCJI4buNIHbDoCB0w6puICIpLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJlZCIgfSwgW192bS5fdigiKCopIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxhYmVsIiwgWwogICAgICBfdm0uX3YoIlPhu5EgxJFp4buHbiB0aG/huqFpICIpLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJlZCIgfSwgW192bS5fdigiKCopIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNwYW4iLCBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFyIGZhLXNhdmUiIH0pXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}